    void writer(thread_pool<cache_work*> *p) {
	char *hdr = (char*)aligned_alloc(512, 4096);
	char *pad_hdr = (char*)aligned_alloc(512, 4096);
	auto period = std::chrono::milliseconds(25);
	const int write_max_pct = 2;
	const int write_max_kb = 512;
	int max_sectors;
	{			// make valgrind happy
	    std::unique_lock lk(m);
	    max_sectors = std::min((write_max_pct *
				    (int)(super->limit - super->base) * 8 / 100),
				   write_max_kb * 2);
	}
	
	while (p->running) {
	    std::vector<char*> bounce_bufs;
	    std::unique_lock lk(m);
	    if (!p->wait_locked(lk))
		break;

	    std::vector<cache_work*> work;
	    int sectors = 0;
	    while (p->running && sectors < max_sectors) {
		cache_work *w;
		if (!p->get_nowait(w))
		    break;
		sectors += w->sectors;
		work.push_back(w);
	    }
	    if (!p->running)
		break;
	    
	    page_t blocks = div_round_up(sectors, 8);
	    // allocate blocks + 1
	    page_t pad, blockno = allocate_locked(blocks+1, pad, lk);

	    long _lba = (blockno+1)*8;
	    for (auto w : work) {
		int len = w->iovs.bytes() / 512;
		xprintf(DBG_MAP, "wr: %ld+%d -> %ld\n", w->lba, len, _lba);
		_lba += len;
	    }
	    
	    if (pad != 0) {
		mk_header(pad_hdr, LSVD_J_PAD, my_uuid, (super->limit - pad));
		assert(pad < (int)super->limit);
		lengths[pad] = super->limit - pad;
		assert(lengths[pad] > 0);
		//xprintf(DBG_MAP, "lens[%d] <- %d\n", pad, super->limit - pad);
	    }

	    j_hdr *j = mk_header(hdr, LSVD_J_DATA, my_uuid, 1+blocks);
	    
	    lengths[blockno] = blocks+1;
	    assert(lengths[blockno] > 0);

	    lk.unlock();
	    
	    if (pad != 0) {
		assert((pad+1)*4096UL <= dev_max);
		if (pwrite(fd, pad_hdr, 4096, pad*4096L) < 0)
		    throw_fs_error("wpad");
	    }

	    std::vector<j_extent> extents;

	    /* note that we're replacing the pointers inside the iovs.
	     * this is really gross.
	     */
	    for (auto w : work) {
		for (int i = 0; i < (int)w->iovs.size(); i++) {
		    if (aligned(w->iovs[i].iov_base, 512))
			continue;
		    char *p = (char*)aligned_alloc(512, w->iovs[i].iov_len);
		    memcpy(p, w->iovs[i].iov_base, w->iovs[i].iov_len);
		    w->iovs[i].iov_base = p;
		    bounce_bufs.push_back(p);
		}
		extents.push_back((j_extent){w->lba, w->iovs.bytes() / 512});
	    }

	    j->extent_offset = sizeof(*j);
	    size_t e_bytes = extents.size() * sizeof(j_extent);
	    j->extent_len = e_bytes;
	    memcpy((void*)(hdr + sizeof(*j)), (void*)extents.data(), e_bytes);
		
	    auto iovs = smartiov();
	    iovs.push_back((iovec){hdr, 4096});

	    for (auto w : work) {
		auto [iov, iovcnt] = w->iovs.c_iov();
		iovs.ingest(iov, iovcnt);
	    }

	    sector_t pad_sectors = blocks*8 - sectors;
	    if (pad_sectors > 0)
		iovs.push_back((iovec){pad_page, (size_t)pad_sectors*512});

	    assert(blockno + div_round_up(iovs.bytes(), 4096) <= (int)super->limit);
	    if (pwritev(fd, iovs.data(), iovs.size(), blockno*4096L) < 0)
		throw_fs_error("wdata");

	    /* update map first under lock. 
	     * Note that map is in units of *sectors*, not blocks 
	     */
	    lk.lock();
	    
	    lba_t plba = (blockno+1) * 8;
	    std::vector<extmap::lba2lba> garbage;
	    for (auto w : work) {
		map.update(w->lba, w->lba + w->sectors, plba, &garbage);
		rmap.update(plba, plba+w->sectors, w->lba);
		plba += sectors;
		map_dirty = true;
	    }
	    for (auto it = garbage.begin(); it != garbage.end(); it++) 
		rmap.trim(it->s.base, it->s.base+it->s.len);
	    lk.unlock();
	    
	    /* then send to backend */
	    for (auto w : work) {
		be->writev(w->lba*512, w->iovs.data(), w->iovs.size());
		w->callback(w->ptr);
	    }

	    while (!bounce_bufs.empty()) {
		free(bounce_bufs.back());
		bounce_bufs.pop_back();
	    }
	    for (auto w : work)
		delete w;
	}
	free(hdr);
	free(pad_hdr);
    }
